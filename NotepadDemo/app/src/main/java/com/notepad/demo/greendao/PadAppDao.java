package com.notepad.demo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.notepad.demo.mode.PadApp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAD_APP".
*/
public class PadAppDao extends AbstractDao<PadApp, Long> {

    public static final String TABLENAME = "PAD_APP";

    /**
     * Properties of entity PadApp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "id");
        public final static Property Content_title = new Property(1, String.class, "content_title", false, "content_title");
        public final static Property Content = new Property(2, String.class, "content", false, "content");
        public final static Property Edit_timer = new Property(3, String.class, "edit_timer", false, "edit_timer");
        public final static Property Padid = new Property(4, long.class, "padid", false, "padid");
    }


    public PadAppDao(DaoConfig config) {
        super(config);
    }
    
    public PadAppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAD_APP\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"content_title\" TEXT," + // 1: content_title
                "\"content\" TEXT," + // 2: content
                "\"edit_timer\" TEXT," + // 3: edit_timer
                "\"padid\" INTEGER NOT NULL );"); // 4: padid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAD_APP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PadApp entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String content_title = entity.getContent_title();
        if (content_title != null) {
            stmt.bindString(2, content_title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String edit_timer = entity.getEdit_timer();
        if (edit_timer != null) {
            stmt.bindString(4, edit_timer);
        }
        stmt.bindLong(5, entity.getPadid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PadApp entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String content_title = entity.getContent_title();
        if (content_title != null) {
            stmt.bindString(2, content_title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String edit_timer = entity.getEdit_timer();
        if (edit_timer != null) {
            stmt.bindString(4, edit_timer);
        }
        stmt.bindLong(5, entity.getPadid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PadApp readEntity(Cursor cursor, int offset) {
        PadApp entity = new PadApp( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // edit_timer
            cursor.getLong(offset + 4) // padid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PadApp entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setContent_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEdit_timer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPadid(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PadApp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PadApp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PadApp entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
